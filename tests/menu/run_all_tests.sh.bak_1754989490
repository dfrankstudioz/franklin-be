#!/usr/bin/env bash
set -Eeuo pipefail

ROOT="$HOME/docker"
MENU_DIR="$ROOT/tests/menu"
LOG_DIR="$ROOT/logs"
mkdir -p "$LOG_DIR"
TS="$(date +%Y%m%d_%H%M%S)"
LOGFILE="$LOG_DIR/run_all_${TS}.log"

# Save original FDs (for interactive spinner) BEFORE redirecting
exec 3>&1 4>&2
# Mirror stdout/stderr to logfile
exec > >(tee -a "$LOGFILE") 2>&1

SCRIPTS=(
  "api_tests.sh"
  "rag_tests.sh"
  "web_ui_tests.sh"
  "routing_tests.sh"
  "env_config_tests.sh"
  "docker_health_tests.sh"
  "logs_snapshot.sh"
  "plugins_tests.sh"
)

total=${#SCRIPTS[@]}
ok=0 fail=0

human() { local s=$1; printf "%02d:%02d:%02d" "$((s/3600))" "$(((s%3600)/60))" "$((s%60))"; }
bar() {
  local current=$1 total=$2 width=28
  (( current<0 )) && current=0
  (( current>total )) && current=$total
  local done=$(( current * width / total ))
  local left=$(( width - done ))
  printf "[%s%s] %d/%d" "$(printf '%*s' "$done" '' | tr ' ' '#')" "$(printf '%*s' "$left" '' | tr ' ' '-')" "$current" "$total"
}

# Decide output mode: spinner to TTY if available; else heartbeat to stdout.
USE_SPINNER=0
if [[ -t 3 && -z "${RUN_ALL_NO_SPINNER:-}" && "${TERM:-}" != "dumb" ]]; then
  USE_SPINNER=1
fi

hide_cursor() { [[ $USE_SPINNER -eq 1 ]] && printf "\033[?25l" >&3 || true; }
show_cursor() { [[ $USE_SPINNER -eq 1 ]] && printf "\033[?25h" >&3 || true; }
clear_line()  { [[ $USE_SPINNER -eq 1 ]] && printf "\r\033[K"   >&3 || true; }

cleanup() { show_cursor; }
trap cleanup EXIT

echo "Run ALL started at $(date '+%F %T')  → logging to $LOGFILE"
suite_start=$(date +%s)
hide_cursor

for i in "${!SCRIPTS[@]}"; do
  s="${SCRIPTS[$i]}"
  idx=$((i+1))
  echo
  echo "=== Running $s ($(bar "$((idx-1))" "$total")) ==="

  start=$(date +%s)
  bash "$MENU_DIR/$s" &
  pid=$!

  if [[ $USE_SPINNER -eq 1 ]]; then
    frames='-\|/'
    fi=0
    while kill -0 "$pid" 2>/dev/null; do
      elapsed=$(( $(date +%s) - start ))
      frame=${frames:$((fi % ${#frames})):1}
      printf "\r  %s  elapsed %s" "$frame" "$(human "$elapsed")" >&3
      sleep 0.2
      ((fi++))
    done
    clear_line
  else
    # Heartbeat printing to stdout so you see it even without a TTY
    last=-1
    while kill -0 "$pid" 2>/dev/null; do
      now=$(( $(date +%s) - start ))
      # print once every 5 seconds to avoid spam
      if (( now / 5 > last )); then
        last=$(( now / 5 ))
        echo "  … still running (elapsed $(human "$now"))"
      fi
      sleep 1
    done
  fi

  status=0
  wait "$pid" || status=$?
  elapsed=$(( $(date +%s) - start ))

  if [[ $status -eq 0 ]]; then
    echo "✓ $s OK  (duration: $(human "$elapsed"))"
    ((ok++))
  else
    echo "✗ $s FAILED  (duration: $(human "$elapsed"))"
    ((fail++))
  fi

  echo "Progress: $(bar "$idx" "$total")"
done

suite_elapsed=$(( $(date +%s) - suite_start ))
echo
echo "Summary: ${ok} OK, ${fail} failed  •  Total time: $(human "$suite_elapsed")"
show_cursor
exit 0
